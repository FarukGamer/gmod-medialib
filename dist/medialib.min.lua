local medialib

do
local a="git@c4078dce"local b=true;medialib={}medialib.VERSION=a;medialib.DISTRIBUTABLE=b;medialib.INSTANCE=medialib.VERSION.."_"..tostring(10000+math.random(90000))medialib.Modules={}local c=CreateConVar("medialib_debug","0",FCVAR_ARCHIVE)cvars.AddChangeCallback(c:GetName(),function(d,d,e)medialib.DEBUG=e=="1"end)medialib.DEBUG=c:GetBool()function medialib.modulePlaceholder(f)medialib.Modules[f]={}end;function medialib.module(f,g)if medialib.DEBUG then print("[MediaLib] Creating module "..f)end;local h=medialib.Modules[f]or{name=f,options=g}medialib.Modules[f]=h;return h end;if SERVER then for d,i in pairs(file.Find("medialib/*","LUA"))do AddCSLuaFile("medialib/"..i)end end;local j=file.Exists;function medialib.tryInclude(file)if j(file,"LUA")then include(file)return true end;if medialib.DEBUG then print("[MediaLib] Attempted to include nonexistent file "..file)end;return false end;function medialib.load(f)local h=medialib.Modules[f]if h then return h end;if medialib.DEBUG then print("[MediaLib] Loading unreferenced module "..f)end;local file="medialib/"..f..".lua"if not medialib.tryInclude(file)then return nil end;return medialib.Modules[f]end;local k=setmetatable({medialib=medialib},{__index=_G})local l={read=function(self)return file.Read(self.lua_path,"LUA")end,load=function(self)return include(self.lua_path)end,addcs=function(self)AddCSLuaFile(self.lua_path)end}l.__index=l;local m={read=function(self)return self.source end,load=function(self)local n=CompileString(self:read(),"MediaLib_DynFile_"..self.name)setfenv(n,k)return n()end,addcs=function()end}m.__index=m;medialib.FolderItems={}function medialib.folderIterator(o)local p={}for d,i in pairs(file.Find("medialib/"..o.."/*.lua","LUA"))do table.insert(p,setmetatable({name=i,lua_path="medialib/"..o.."/"..i},l))end;for q,r in pairs(medialib.FolderItems)do local s=q:match("^([^/]*).+")if s==o then table.insert(p,setmetatable({name=q:match("^[^/]*/(.+)"),source=r},m))end end;return pairs(p)end;if CLIENT then local function t()for u=1,30 do MsgC(HSVToColor(30*u,0.5,0.9)," "..string.rep("SEE BELOW FOR INSTRUCTIONS  ",3).."\n")end end;concommand.Add("medialib_noflash",function(d,d,v)if v[1]=="rainbow"then t()end;SetClipboardText("http://get.adobe.com/flashplayer/otherversions/")MsgN("[ MediaLib: How to get Flash Player ]")MsgN("1. Open this website in your browser (not the ingame Steam browser): http://get.adobe.com/flashplayer/otherversions/")MsgN("   (the link has been automatically copied to your clipboard)")MsgN("2. Download and install the NSAPI (for Firefox) version")MsgN("3. Restart your Garry's Mod and rejoin this server")MsgN("[ ======================= ]")end)concommand.Add("medialib_lowaudio",function(d,d,v)if v[1]=="rainbow"then t()end;SetClipboardText("http://windows.microsoft.com/en-us/windows7/adjust-the-sound-level-on-your-computer")MsgN("[ MediaLib: How to fix muted sound ]")MsgN("1. Follow instructions here: http://windows.microsoft.com/en-us/windows7/adjust-the-sound-level-on-your-computer")MsgN("   (the link has been automatically copied to your clipboard, you can open it in the steam ingame browser)")MsgN("2. Increase the volume of a process called 'Awesomium Core'")MsgN("3. You should immediately start hearing sound if a mediaclip is playing")MsgN("[ ======================= ]")end)hook.Add("OnPlayerChat","MediaLib.ShowInstructions",function(w,x)if x:match("!ml_noflash")then RunConsoleCommand("medialib_noflash","rainbow")RunConsoleCommand("showconsole")elseif x:match("!ml_lowvolume")then RunConsoleCommand("medialib_lowaudio","rainbow")RunConsoleCommand("showconsole")end end)end
end

-- 'oop'; CodeLen/MinifiedLen 2927/1560; Dependencies []
medialib.modulePlaceholder("oop")
do
local a=medialib.module("oop")a.Classes=a.Classes or{}function a.class(b,c)local d=a.Classes[b]if not d then d=a.createClass(b,c)a.Classes[b]=d;if medialib.DEBUG then print("[MediaLib] Registering oopclass "..b)end end;return d end;function a.resolveClass(e)if e==nil then return a.Object end;local f=type(e)if f=="string"then local g=a.Classes[e]if g then return g end;error("Resolving class from inexistent class string '"..tostring(e).."'")end;if f=="table"then return e end;error("Resolving class from invalid object '"..tostring(e).."'")end;local h={}local i={'__add','__call','__concat','__div','__ipairs','__le','__len','__lt','__mod','__mul','__pairs','__pow','__sub','__tostring','__unm'}function a.createClass(b,c)local d={}local j;if c~=h then j=a.resolveClass(c)end;d.name=b;d.super=j;d.members=setmetatable({},{__index=d.super})d.members.class=d;d.members.super=d.super;local k={}do k.__index=d.members;for l,b in pairs(i)do k[b]=function(...)local m=d.members[b]if m then return m(...)end end end end;local n={}do n.__index=d.members;n.__newindex=d.members;n.__tostring=function(self)return"class "..self.name end;function n:__call(...)local o={}setmetatable(o,k)local p=o.initialize;if p then p(o,...)end;return o end end;setmetatable(d,n)return d end;a.Object=a.createClass("Object",h)function a.Object:hashCode()local q=getmetatable(self)local r=q.__tostring;q.__tostring=nil;local s=tostring(self):match("table: 0x(.*)")q.__tostring=r;return s end;function a.Object:__tostring()return string.format("%s@%s",self.class.name,self:hashCode())end
end
-- 'mediabase'; CodeLen/MinifiedLen 4305/2107; Dependencies [oop]
medialib.modulePlaceholder("mediabase")
do
local a=medialib.load("oop")local b=a.class("Media")function b:on(c,d)self._events=self._events or{}self._events[c]=self._events[c]or{}self._events[c][d]=true end;function b:emit(c,...)if not self._events then return end;local e=self._events[c]if not e then return end;for f,g in pairs(e)do f(...)end end;function b:getServiceBase()error("Media:getServiceBase() not implemented!")end;function b:getService()return self._service end;function b:getUrl()return self._unresolvedUrl end;function b:lookupMetadata()local h=self._metadata;if type(h)=="table"then return h end;if h==true or type(h)=="string"then return nil end;self._metadata=true;self:getService():query(self:getUrl(),function(i,j)if i then self._metadata=i else self._metadata=j end end)return nil end;function b:isValid()return false end;function b:IsValid()return self:isValid()end;function b:setVolume(k)end;function b:getVolume()end;function b:setQuality(l)end;function b:seek(m)end;function b:getTime()return 0 end;function b:sync(m,n)if self._lastSync and self._lastSync>CurTime()-5 then return end;local o=self:shouldSync(m,n)if not o then return end;self:seek(m+0.1)self._lastSync=CurTime()end;function b:shouldSync(m,n)if not self:isValid()or not self:isPlaying()then return false end;n=n or 2;local p=self:getTime()local q=math.abs(p-m)return q>n end;function b:getState()end;function b:isPlaying()return self:getState()=="playing"end;function b:play()end;function b:pause()end;function b:stop()end;function b:runCommand(r)end;function b:draw(s,t,u,v)end;function b:getTag()return self._tag end;function b:setTag(w)self._tag=w end;function b:guessDefaultTag()for x=1,10 do local y=debug.getinfo(x,"S")if not y then break end;local z=y.short_src;local A=z:match("addons/(.-)/")if A and A~="medialib"then return string.format("addon:%s",A)end end;return"addon:medialib"end;function b:setDefaultTag()self:setTag(self:guessDefaultTag())end;function b:getDebugInfo()return string.format("[%s] Media [%s] valid:%s state:%s url:%s time:%d",self:getTag(),self.class.name,tostring(self:isValid()),self:getState(),self:getUrl(),self:getTime())end
end
-- 'media'; CodeLen/MinifiedLen 746/487; Dependencies []
medialib.modulePlaceholder("media")
do
local a=medialib.module("media")a.Services={}function a.registerService(b,c)a.Services[b]=c()end;a.RegisterService=a.registerService;function a.service(b)return a.Services[b]end;a.Service=a.service;function a.guessService(d,e)for b,f in pairs(a.Services)do local g=true;if e and e.whitelist then g=g and table.HasValue(e.whitelist,b)end;if e and e.blacklist then g=g and not table.HasValue(e.blacklist,b)end;if g and f:isValidUrl(d)then return f end end end;a.GuessService=a.guessService
end
-- 'mediaregistry'; CodeLen/MinifiedLen 1246/1004; Dependencies []
medialib.modulePlaceholder("mediaregistry")
do
local a=medialib.module("mediaregistry")local b=setmetatable({},{__mode="v"})function a.add(c)table.insert(b,c)end;function a.get()return b end;concommand.Add("medialib_listall",function()hook.Run("MediaLib_ListAll")end)hook.Add("MediaLib_ListAll","MediaLib_"..medialib.INSTANCE,function()print("Media for medialib version "..medialib.INSTANCE..":")for d,e in pairs(b)do print(e:getDebugInfo())end end)concommand.Add("medialib_stopall",function()hook.Run("MediaLib_StopAll")end)hook.Add("MediaLib_StopAll","MediaLib_"..medialib.INSTANCE,function()for d,e in pairs(b)do e:stop()end;table.Empty(b)end)local f=CreateConVar("medialib_debugmedia","0")hook.Add("HUDPaint","MediaLib_G_DebugMedia",function()if not f:GetBool()then return end;local g={0}hook.Run("MediaLib_DebugPaint",g)end)hook.Add("MediaLib_DebugPaint","MediaLib_"..medialib.INSTANCE,function(g)local h=g[1]for d,c in pairs(b)do local i=string.format("#%d %s",h,c:getDebugInfo())draw.SimpleText(i,"DermaDefault",10,10+h*15)h=h+1 end;g[1]=h end)
end
-- 'servicebase'; CodeLen/MinifiedLen 2234/1163; Dependencies [oop,mediaregistry]
medialib.modulePlaceholder("servicebase")
do
local a=medialib.load("oop")local b=medialib.load("mediaregistry")local c=a.class("Service")function c:on(d,e)self._events={}self._events[d]=self._events[d]or{}self._events[d][e]=true end;function c:emit(d,...)for f,g in pairs(self._events[d]or{})do f(...)end;if d=="error"then MsgN("[MediaLib] Video error: "..table.ToString{...})end end;function c:load(h,i)end;function c:loadMediaObject(j,h,i)j._unresolvedUrl=h;j._service=self;j:setDefaultTag()hook.Run("Medialib_ProcessOpts",j,i or{})b.add(j)self:resolveUrl(h,function(k,l)j:openUrl(k)if l and l.start and(not i or not i.dontSeek)then j:seek(l.start)end end)end;function c:isValidUrl(h)end;function c:directQuery(h,e)end;local m={}m.__index=m;function m:addCallback(n)table.insert(self._callbacks,n)end;function m:run(o,p)local q=table.remove(self._callbacks,1)if not q then return end;q(o,p,function(o,p)self:run(o,p)end)end;function c:query(h,e)local r=setmetatable({_callbacks={}},m)r:addCallback(function(g,g,n)return self:directQuery(h,n)end)hook.Run("Medialib_ExtendQuery",h,r)r:addCallback(function(o,p)e(o,p)end)r:run(h)end;function c:parseUrl(h)end;function c:resolveUrl(h,n)n(h,self:parseUrl(h))end
end
-- 'timekeeper'; CodeLen/MinifiedLen 1016/695; Dependencies [oop]
medialib.modulePlaceholder("timekeeper")
do
local a=medialib.load("oop")local b=a.class("TimeKeeper")function b:initialize()self:reset()end;function b:reset()self.cachedTime=0;self.running=false;self.runningTimeStart=0 end;function b:getTime()local c=self.cachedTime;if self.running then c=c+RealTime()-self.runningTimeStart end;return c end;function b:isRunning()return self.running end;function b:play()if self.running then return end;self.runningTimeStart=RealTime()self.running=true end;function b:pause()if not self.running then return end;local d=RealTime()-self.runningTimeStart;self.cachedTime=self.cachedTime+d;self.running=false end;function b:seek(c)self.cachedTime=c;if self.running then self.runningTimeStart=RealTime()end end
end
-- 'service_html'; CodeLen/MinifiedLen 8426/5593; Dependencies [oop,timekeeper]
medialib.modulePlaceholder("service_html")
do
local a=medialib.load("oop")medialib.load("timekeeper")local b=a.class("HTMLService","Service")function b:load(c,d)local e=a.class("HTMLMedia")()self:loadMediaObject(e,c,d)return e end;function b:hasReliablePlaybackEvents(e)return false end;local f={instances={}}local function g()return medialib.MAX_HTMLPOOL_INSTANCES or 0 end;hook.Add("MediaLib_HTMLPoolInfo",medialib.INSTANCE,function()print(medialib.INSTANCE.."> Free HTMLPool instance count: "..#f.instances.."/"..g())end)concommand.Add("medialib_htmlpoolinfo",function()hook.Run("MediaLib_HTMLPoolInfo")end)timer.Create("MediaLib."..medialib.INSTANCE..".HTMLPoolCleaner",60,0,function()if#f.instances==0 then return end;local h=table.remove(f.instances,1)if IsValid(h)then h:Remove()end end)function f.newInstance()return vgui.Create("DHTML")end;function f.get()if#f.instances==0 then if medialib.DEBUG then MsgN("[MediaLib] Returning new instance; htmlpool empty")end;return f.newInstance()end;local h=table.remove(f.instances,1)if not IsValid(h)then if medialib.DEBUG then MsgN("[MediaLib] Returning new instance; instance was invalid")end;return f.newInstance()end;if medialib.DEBUG then MsgN("[MediaLib] Returning an instance from the HTML pool")end;return h end;function f.free(h)if not IsValid(h)then return end;if#f.instances>=g()then if medialib.DEBUG then MsgN("[MediaLib] HTMLPool full; removing the freed instance")end;h:Remove()else if medialib.DEBUG then MsgN("[MediaLib] Freeing an instance to the HTMLPool")end;h:SetHTML("")table.insert(f.instances,h)end end;local i=CreateConVar("medialib_showallmessages","0")local j=a.class("HTMLMedia","Media")local k,l=1280,720;function j:initialize()self.timeKeeper=a.class("TimeKeeper")()self.panel=f.get()local m=self.panel;m:SetPos(0,0)m:SetSize(k,l)local n="MediaLib.HTMLMedia.FakeThink-"..self:hashCode()hook.Add("Think",n,function()if not IsValid(self.panel)then hook.Remove("Think",n)return end;self.panel:Think()end)local o=m._OldCM or m.ConsoleMessage;m._OldCM=o;m.ConsoleMessage=function(p,q)if q and not i:GetBool()then if string.find(q,"XMLHttpRequest",nil,true)then return end;if string.find(q,"Unsafe JavaScript attempt to access",nil,true)then return end;if string.find(q,"Unable to post message to",nil,true)then return end;if string.find(q,"ran insecure content from",nil,true)then return end;if string.find(q,"Mixed Content:",nil,true)then return end end;return o(p,q)end;m:AddFunction("console","warn",function(r)if not i:GetBool()then return end;m:ConsoleMessage(r)end)m:SetPaintedManually(true)m:SetVisible(false)m:AddFunction("medialiblua","Event",function(s,t)self:handleHTMLEvent(s,util.JSONToTable(t))end)end;function j:getBaseService()return"html"end;function j:openUrl(c)self.panel:OpenURL(c)self.URLChanged=CurTime()end;function j:runJS(u,...)local v=string.format(u,...)self.panel:QueueJavascript(v)end;function j:handleHTMLEvent(s,w)if medialib.DEBUG then MsgN("[MediaLib] HTML Event: "..s.." ("..table.ToString(w)..")")end;if s=="stateChange"then local x=w.state;local y;if w.time then self.timeKeeper:seek(w.time)end;if x=="playing"then y="playing"self.timeKeeper:play()elseif x=="ended"or x=="paused"or x=="buffering"then y=x;self.timeKeeper:pause()end;if y then self.state=y;self:emit(y)end elseif s=="playerLoaded"then for z,A in pairs(self.commandQueue or{})do A()end elseif s=="error"then self:emit("error",{errorId="service_error",errorName="Error from service: "..tostring(w.message)})else MsgN("[MediaLib] Unhandled HTML event "..tostring(s))end end;function j:getState()return self.state end;local B=CreateConVar("medialib_html_updatestride","1",FCVAR_ARCHIVE)function j:updateTexture()local C=FrameNumber()local D=C-(self.lastUpdatedFrame or 0)if D>=B:GetInt()then self.panel:UpdateHTMLTexture()self.lastUpdatedFrame=C end end;function j:getHTMLMaterial()if self._htmlMat then return self._htmlMat end;local E=self.panel:GetHTMLMaterial()self._htmlMat=E;return E end;function j:draw(F,G,H,I)self:updateTexture()local E=self:getHTMLMaterial()if not E then return end;surface.SetMaterial(E)surface.SetDrawColor(255,255,255)local J,K=k/E:Width(),l/E:Height()surface.DrawTexturedRectUV(F or 0,G or 0,H or k,I or l,0,0,J,K)end;function j:getTime()return self.timeKeeper:getTime()end;function j:setQuality(L)if self.lastSetQuality and self.lastSetQuality==L then return end;self.lastSetQuality=L;self:runJS("medialibDelegate.run('setQuality', {quality: %q})",L)end;function j:applyVolume()local M=self.internalVolume or 1;local N=self.volume or 1;local O=M*N;if self.lastSetVolume and self.lastSetVolume==O then return end;self.lastSetVolume=O;self:runJS("medialibDelegate.run('setVolume', {vol: %f})",O)end;function j:setVolume(O)self.volume=O;self:applyVolume()end;function j:getVolume()return self.volume or 1 end;local P=0.2;function j:seek(Q)self.timeKeeper:seek(Q-P)self:runJS("medialibDelegate.run('seek', {time: %.1f})",Q)end;function j:hasReliablePlaybackEvents()local R=self:getService()return R and R:hasReliablePlaybackEvents(self)end;function j:play()if not self:hasReliablePlaybackEvents()then self.timeKeeper:play()end;self:runJS("medialibDelegate.run('play')")end;function j:pause()if not self:hasReliablePlaybackEvents()then self.timeKeeper:pause()end;self:runJS("medialibDelegate.run('pause')")end;function j:stop()f.free(self.panel)self.panel=nil;self.timeKeeper:pause()self:emit("ended",{stopped=true})self:emit("destroyed")end;function j:runCommand(A)if self._playerLoaded then A()else self.commandQueue=self.commandQueue or{}self.commandQueue[#self.commandQueue+1]=A end end;function j:isValid()return IsValid(self.panel)end
end
-- 'service_bass'; CodeLen/MinifiedLen 6686/4700; Dependencies [oop,mediaregistry]
medialib.modulePlaceholder("service_bass")
do
local a=medialib.load("oop")local b=a.class("BASSService","Service")function b:load(c,d)local e=a.class("BASSMedia")()self:loadMediaObject(e,c,d)return e end;local f=a.class("BASSMedia","Media")function f:initialize()self.bassPlayOptions={"noplay","noblock"}self.commandQueue={}end;function f:getBaseService()return"bass"end;function f:updateFFT()local g=FrameNumber()if self._lastFFTUpdate and self._lastFFTUpdate==g then return end;self._lastFFTUpdate=g;local h=self.chan;if not IsValid(h)then return end;self.fftValues=self.fftValues or{}h:FFT(self.fftValues,FFT_512)end;function f:getFFT()return self.fftValues end;function f:draw(i,j,k,l)surface.SetDrawColor(0,0,0)surface.DrawRect(i,j,k,l)self:updateFFT()local m=self:getFFT()if not m then return end;local n=#m;local o=n==0 and 1 or k/n;local p=k/n;for q=1,n do surface.SetDrawColor(HSVToColor(q,0.9,0.5))local r=m[q]*l;surface.DrawRect(i+q*p,j+l-r,p,r)end end;function f:openUrl(c)self._openingInfo={"url",c}local s=table.concat(self.bassPlayOptions," ")sound.PlayURL(c,s,function(h,t,u)self:bassCallback(h,t,u)end)end;function f:openFile(v)self._openingInfo={"file",v}local s=table.concat(self.bassPlayOptions," ")sound.PlayFile(v,s,function(h,t,u)self:bassCallback(h,t,u)end)end;function f:reload()local w,x=unpack(self._openingInfo or{})if not w then MsgN("[Medialib] Attempting to reload BASS stream that was never started the first time!")return end;if IsValid(self.chan)then self.chan:Stop()self.chan=nil end;self._stopped=false;self:stopStateChecker()self.commandQueue={}MsgN("[Medialib] Attempting to reload BASS stream ",w,x)if w=="url"then self:openUrl(x)elseif w=="file"then self:openFile(x)elseif w then MsgN("[Medialib] Failed to reload audio resource ",w,x)return end;self:applyVolume(true)if self._commandState=="play"then self:play()end end;function f:bassCallback(h,t,u)if not IsValid(h)then ErrorNoHalt("[MediaLib] BassMedia play failed: ",u)self._stopped=true;self:emit("error","loading_failed",string.format("BASS error id: %s; name: %s",t,u))return end;if self._stopped then MsgN("[MediaLib] Loading BASS media aborted; stop flag was enabled")h:Stop()return end;self.chan=h;for y,z in pairs(self.commandQueue)do z(h)end;self.commandQueue={}self:startStateChecker()end;function f:startStateChecker()timer.Create("MediaLib_BASS_EndChecker_"..self:hashCode(),1,0,function()if IsValid(self.chan)and self.chan:GetState()==GMOD_CHANNEL_STOPPED then self:emit("ended")self:stopStateChecker()end end)end;function f:stopStateChecker()timer.Remove("MediaLib_BASS_EndChecker_"..self:hashCode())end;function f:runCommand(A)if IsValid(self.chan)then A(self.chan)else self.commandQueue[#self.commandQueue+1]=A end end;function f:applyVolume(B)local C=self.internalVolume or 1;local D=self.volume or 1;local E=C*D;if not B and self.lastSetVolume and self.lastSetVolume==E then return end;self.lastSetVolume=E;self:runCommand(function(h)h:SetVolume(E)end)end;function f:setVolume(E)self.volume=E;self:applyVolume()end;function f:getVolume()return self.volume or 1 end;function f:seek(F)self:runCommand(function(h)if h:IsBlockStreamed()then return end;self._seekingTo=F;local G="MediaLib_BASSMedia_Seeker_"..self:hashCode()local function H()if self._seekingTo~=F or not IsValid(h)then timer.Destroy(G)return end;h:SetTime(F)if math.abs(h:GetTime()-F)<0.25 then timer.Destroy(G)end end;timer.Create(G,0.2,0,H)H()end)end;function f:getTime()if self:isValid()and IsValid(self.chan)then return self.chan:GetTime()end;return 0 end;function f:getState()if not self:isValid()then return"error"end;if not IsValid(self.chan)then return"loading"end;local I=self.chan:GetState()if I==GMOD_CHANNEL_PLAYING then return"playing"end;if I==GMOD_CHANNEL_PAUSED then return"paused"end;if I==GMOD_CHANNEL_STALLED then return"buffering"end;if I==GMOD_CHANNEL_STOPPED then return"paused"end;return end;function f:play()self:runCommand(function(h)h:Play()self:emit("playing")self._commandState="play"end)end;function f:pause()self:runCommand(function(h)h:Pause()self:emit("paused")self._commandState="pause"end)end;function f:stop()self._stopped=true;self:runCommand(function(h)h:Stop()self:emit("ended",{stopped=true})self:emit("destroyed")self:stopStateChecker()end)end;function f:isValid()return not self._stopped end;local J=medialib.load("mediaregistry")local K="ML_MapCleanHack_"..medialib.INSTANCE;if CLIENT then net.Receive(K,function()for y,L in pairs(J.get())do if L:getBaseService()=="bass"and L:isValid()and IsValid(L.chan)and L.chan:GetState()==GMOD_CHANNEL_STOPPED then L:reload()end end end)end;if SERVER then util.AddNetworkString(K)hook.Add("PostCleanupMap","MediaLib_BassReload"..medialib.INSTANCE,function()net.Start(K)net.Broadcast()end)end
end
medialib.FolderItems["services/gdrive.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"GDriveService\",\"HTMLService\")b.identifier=\"GDrive\"local c={\"^https?://drive.google.com/file/d/([^/]*)/edit\"}function b:parseUrl(d)for e,f in pairs(c)do local g=string.match(d,f)if g then return{id=g}end end end;function b:isValidUrl(d)return self:parseUrl(d)~=nil end;local function h(i)if i then i=string.gsub(i,\"\\n\",\"\\r\\n\")i=string.gsub(i,\"([^%w ])\",function(j)return string.format(\"%%%02X\",string.byte(j))end)i=string.gsub(i,\" \",\"+\")end;return i end;local k=\"https://wyozi.github.io/gmod-medialib/mp4.html?id=%s\"local l=\"https://drive.google.com/uc?export=download&confirm=yTib&id=%s\"function b:resolveUrl(d,m)local n=self:parseUrl(d)local o=string.format(k,h(string.format(l,n.id)))m(o,{start=n.start})end;function b:directQuery(d,m)m(nil,{title=d:match(\"([^/]+)$\")})end;function b:hasReliablePlaybackEvents(p)return true end;return b"
medialib.FolderItems["services/mp4.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"Mp4Service\",\"HTMLService\")b.identifier=\"mp4\"local c={\"^https?://.*%.mp4\"}function b:parseUrl(d)for e,f in pairs(c)do local g=string.match(d,f)if g then return{id=g}end end end;function b:isValidUrl(d)return self:parseUrl(d)~=nil end;local h=\"https://wyozi.github.io/gmod-medialib/mp4.html?id=%s\"function b:resolveUrl(d,i)local j=self:parseUrl(d)local k=string.format(h,j.id)i(k,{start=j.start})end;function b:directQuery(d,i)i(nil,{title=d:match(\"([^/]+)$\")})end;function b:hasReliablePlaybackEvents(l)return true end;return b"
medialib.FolderItems["services/soundcloud.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"SoundcloudService\",\"BASSService\")b.identifier=\"soundcloud\"local c={\"^https?://www.soundcloud.com/([A-Za-z0-9_%-]+/[A-Za-z0-9_%-]+)/?.*$\",\"^https?://soundcloud.com/([A-Za-z0-9_%-]+/[A-Za-z0-9_%-]+)/?.*$\"}local d=\"^https?://api.soundcloud.com/tracks/(%d+)\"function b:parseUrl(e)for f,g in pairs(c)do local h=string.match(e,g)if h then return{path=h}end end;local i=string.match(e,d)if i then return{id=i}end end;function b:isValidUrl(e)return self:parseUrl(e)~=nil end;function b:resolveUrl(e,j)local k=medialib.SOUNDCLOUD_API_KEY;if not k then ErrorNoHalt(\"SoundCloud error: Missing SoundCloud API key\")return end;if type(k)==\"table\"then k=table.Random(k)end;local l=self:parseUrl(e)if l.id then j(string.format(\"https://api.soundcloud.com/tracks/%s/stream?client_id=%s\",l.id,k),{})else http.Fetch(string.format(\"https://api.soundcloud.com/resolve.json?url=http://soundcloud.com/%s&client_id=%s\",l.path,k),function(m)local n=util.JSONToTable(m)if not n then ErrorNoHalt(\"Failed to retrieve SC track id for \"..l.path..\": empty JSON\")return end;local i=n.id;j(string.format(\"https://api.soundcloud.com/tracks/%s/stream?client_id=%s\",i,k),{})end)end end;function b:directQuery(e,j)local k=medialib.SOUNDCLOUD_API_KEY;if not k then j(\"Missing SoundCloud API key\")return end;if type(k)==\"table\"then k=table.Random(k)end;local l=self:parseUrl(e)local o;if l.path then o=string.format(\"https://api.soundcloud.com/resolve.json?url=http://soundcloud.com/%s&client_id=%s\",l.path,k)else o=string.format(\"https://api.soundcloud.com/tracks/%s?client_id=%s\",l.id,k)end;http.Fetch(o,function(p,q)if q==0 then j(\"http body size = 0\")return end;local r=util.JSONToTable(p)if r.errors then local s=r.errors[1].error_message or\"error\"local t=s;if string.StartWith(s,\"404\")then t=\"Invalid id\"end;j(t)return end;j(nil,{title=r.title,duration=tonumber(r.duration)/1000})end,function(u)j(\"HTTP: \"..u)end)end;return b"
medialib.FolderItems["services/twitch.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"TwitchService\",\"HTMLService\")b.identifier=\"twitch\"local c={\"https?://www.twitch.tv/([A-Za-z0-9_%-]+)\",\"https?://twitch.tv/([A-Za-z0-9_%-]+)\"}function b:parseUrl(d)for e,f in pairs(c)do local g=string.match(d,f)if g then return{id=g}end end end;function b:isValidUrl(d)return self:parseUrl(d)~=nil end;local h=\"https://wyozi.github.io/gmod-medialib/twitch.html?channel=%s\"function b:resolveUrl(d,i)local j=self:parseUrl(d)local k=string.format(h,j.id)i(k,{start=j.start})end;local l=\"4cryixome326gh0x0j0fkulahsbdvx\"local function m(n,i)http.Fetch(\"https://api.twitch.tv/kraken/users?login=\"..n,function(o)local p=util.JSONToTable(o)if not p then i(\"malformed response JSON\")return end;i(nil,p.users[1]._id)end,function()i(\"failed HTTP request\")end,{Accept=\"application/vnd.twitchtv.v5+json\",[\"Client-ID\"]=l})end;local function q(g,i)http.Fetch(\"https://api.twitch.tv/kraken/channels/\"..g,function(o)local p=util.JSONToTable(o)if not p then i(\"malformed response JSON\")return end;i(nil,p)end,function()i(\"failed HTTP request\")end,{Accept=\"application/vnd.twitchtv.v5+json\",[\"Client-ID\"]=l})end;function b:directQuery(d,i)local j=self:parseUrl(d)m(j.id,function(r,g)if r then i(r)return end;q(g,function(r,s)if r then i(r)return end;local t={}t.id=j.id;if s.error then i(s.message)return else t.title=s.display_name..\": \"..s.status end;i(nil,t)end)end)end;return b"
medialib.FolderItems["services/vimeo.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"VimeoService\",\"HTMLService\")b.identifier=\"vimeo\"local c={\"https?://www.vimeo.com/([0-9]+)\",\"https?://vimeo.com/([0-9]+)\",\"https?://www.vimeo.com/channels/staffpicks/([0-9]+)\",\"https?://vimeo.com/channels/staffpicks/([0-9]+)\"}function b:parseUrl(d)for e,f in pairs(c)do local g=string.match(d,f)if g then return{id=g}end end end;function b:isValidUrl(d)return self:parseUrl(d)~=nil end;local h=\"http://wyozi.github.io/gmod-medialib/vimeo.html?id=%s\"function b:resolveUrl(d,i)local j=self:parseUrl(d)local k=string.format(h,j.id)i(k,{start=j.start})end;function b:directQuery(d,i)local j=self:parseUrl(d)local l=string.format(\"http://vimeo.com/api/v2/video/%s.json\",j.id)http.Fetch(l,function(m,n,o,p)if n==0 then i(\"http body size = 0\")return end;if p==404 then i(\"Invalid id\")return end;local q={}q.id=j.id;local r=util.JSONToTable(m)if r then q.title=r[1].title;q.duration=r[1].duration else q.title=\"ERROR\"end;i(nil,q)end,function(s)i(\"HTTP: \"..s)end)end;function b:hasReliablePlaybackEvents(t)return true end;return b"
medialib.FolderItems["services/webaudio.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"WebAudioService\",\"BASSService\")b.identifier=\"webaudio\"local c={\"^https?://(.*)%.mp3\",\"^https?://(.*)%.ogg\"}function b:parseUrl(d)for e,f in pairs(c)do local g=string.match(d,f)if g then return{id=g}end end end;function b:isValidUrl(d)return self:parseUrl(d)~=nil end;function b:resolveUrl(d,h)h(d,{})end;function b:directQuery(d,h)h(nil,{title=d:match(\"([^/]+)$\")})end;return b"
medialib.FolderItems["services/webm.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"WebmService\",\"HTMLService\")b.identifier=\"webm\"local c={\"^https?://.*%.webm\"}function b:parseUrl(d)for e,f in pairs(c)do local g=string.match(d,f)if g then return{id=g}end end end;function b:isValidUrl(d)return self:parseUrl(d)~=nil end;local h=\"http://wyozi.github.io/gmod-medialib/webm.html?id=%s\"function b:resolveUrl(d,i)local j=self:parseUrl(d)local k=string.format(h,j.id)i(k,{start=j.start})end;function b:directQuery(d,i)i(nil,{title=d:match(\"([^/]+)$\")})end;return b"
medialib.FolderItems["services/webradio.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"WebRadioService\",\"BASSService\")b.identifier=\"webradio\"local c={\"^https?://(.*)%.pls\",\"^https?://(.*)%.m3u\"}function b:parseUrl(d)for e,f in pairs(c)do local g=string.match(d,f)if g then return{id=g}end end end;function b:isValidUrl(d)return self:parseUrl(d)~=nil end;function b:resolveUrl(d,h)h(d,{})end;function b:directQuery(d,h)h(nil,{title=d:match(\"([^/]+)$\")})end;return b"
medialib.FolderItems["services/youtube.lua"] = "local a=medialib.load(\"oop\")local b=a.class(\"YoutubeService\",\"HTMLService\")b.identifier=\"youtube\"local c={\"^https?://[A-Za-z0-9%.%-]*%.?youtu%.be/([A-Za-z0-9_%-]+)\",\"^https?://[A-Za-z0-9%.%-]*%.?youtube%.com/watch%?.*v=([A-Za-z0-9_%-]+)\",\"^https?://[A-Za-z0-9%.%-]*%.?youtube%.com/v/([A-Za-z0-9_%-]+)\"}local d={}for e,f in pairs(c)do local function g(h)table.insert(d,f..h..\"t=(%d+)m(%d+)s\")table.insert(d,f..h..\"t=(%d+)s?\")end;g(\"#\")g(\"&\")g(\"?\")table.insert(d,f)end;function b:parseUrl(i)for j,k in pairs(d)do local l,m,n=string.match(i,k)if l then local o=0;if m and n then o=tonumber(m)*60+tonumber(n)else o=tonumber(m)end;return{id=l,start=o}end end end;function b:isValidUrl(i)return self:parseUrl(i)~=nil end;local p=\"http://wyozi.github.io/gmod-medialib/youtube.html?id=%s\"function b:resolveUrl(i,q)local r=self:parseUrl(i)local s=string.format(p,r.id)q(s,{start=r.start})end;local function t(u)local v=u:match(\"(%d+)H\")or 0;local w=u:match(\"(%d+)M\")or 0;local x=u:match(\"(%d+)S\")or 0;return v*60*60+w*60+x end;local y=\"AIzaSyBmQHvMSiOTrmBKJ0FFJ2LmNtc4YHyUJaQ\"function b:directQuery(i,q)local r=self:parseUrl(i)local z=string.format(\"https://www.googleapis.com/youtube/v3/videos?part=snippet%%2CcontentDetails&id=%s&key=%s\",r.id,y)http.Fetch(z,function(A,B)if B==0 then q(\"http body size = 0\")return end;local C={}C.id=r.id;local D=util.JSONToTable(A)if D and D.items then local E=D.items[1]if not E then q(\"No video id found\")return end;C.title=E.snippet.title;C.duration=tonumber(t(E.contentDetails.duration))else q(A)return end;q(nil,C)end,function(F)q(\"HTTP: \"..F)end)end;function b:hasReliablePlaybackEvents(G)return true end;return b"
-- 'serviceloader'; CodeLen/MinifiedLen 533/420; Dependencies [servicebase,service_html,service_bass,media,oop]
medialib.modulePlaceholder("serviceloader")
do
medialib.load("servicebase")medialib.load("service_html")medialib.load("service_bass")local a=medialib.load("media")for b,c in medialib.folderIterator("services")do if medialib.DEBUG then print("[MediaLib] Registering service "..c.name)end;if SERVER then c:addcs()end;local d,e=pcall(function()return c:load()end)if d then a.registerService(e.identifier,e)else print("[MediaLib] Failed to load service ",c,": ",e)end end
end
-- '__loader'; CodeLen/MinifiedLen 325/78; Dependencies [mediabase,media,serviceloader]
medialib.modulePlaceholder("__loader")
do
medialib.load("mediabase")medialib.load("media")medialib.load("serviceloader")
end
return medialib