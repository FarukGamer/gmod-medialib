medialib={}medialib.DISTRIBUTABLE=true;medialib.Modules={}medialib.DEBUG=false;function medialib.modulePlaceholder(a)medialib.Modules[a]={}end;function medialib.module(a,b)if medialib.DEBUG then print("[MediaLib] Creating module "..a)end;local c=medialib.Modules[a]or{a=a,options=b}medialib.Modules[a]=c;return c end;if SERVER then for d,e in pairs(file.Find("medialib/*","LUA"))do AddCSLuaFile("medialib/"..e)end end;function medialib.load(a)local c=medialib.Modules[a]if c then return c end;if medialib.DEBUG then print("[MediaLib] Loading unreferenced module "..a)end;local file="medialib/"..a..".lua"include(file)return medialib.Modules[a]end;local f={read=function(g)return file.Read(g.lua_path,"LUA")end,load=function(g)include(g.lua_path)end,addcs=function(g)AddCSLuaFile(g.lua_path)end}f.__index=f;local h={read=function(g)return g.source end,load=function(g)RunString(g.source)end,addcs=function()end}h.__index=h;medialib.FolderItems={}function medialib.folderIterator(i)local j={}for d,e in pairs(file.Find("medialib/"..i.."/*.lua","LUA"))do table.insert(j,setmetatable({a=e,lua_path="medialib/"..i.."/"..e},f))end;for k,l in pairs(medialib.FolderItems)do local m=k:match("^([^/]*).+")if m==i then table.insert(j,setmetatable({a=k:match("^[^/]*/(.+)"),source=l},h))end end;return pairs(j)end;if CLIENT then concommand.Add("medialib_noflash",function()SetClipboardText("http://get.adobe.com/flashplayer/otherversions/")MsgN("[ MediaLib: How to get Flash Player ]")MsgN("1. Open this website in your browser (not the ingame Steam browser): http://get.adobe.com/flashplayer/otherversions/")MsgN("   (it has been automatically copied to your clipboard)")MsgN("2. Download and install the NSAPI (for Firefox) version")MsgN("3. Restart your Garry's Mod")MsgN("[ ======================= ]")end)end

-- Module oop
medialib.modulePlaceholder("oop")
do
local oop=medialib.module("oop")oop.Classes=oop.Classes or{}function oop.class(name,a)local b=oop.Classes[name]if not b then b=oop.createClass(name,a)oop.Classes[name]=b;if medialib.DEBUG then print("[MediaLib] Registering oopclass "..name)end end;return b end;function oop.resolveClass(c)if c==nil then return oop.Object end;local d=type(c)if d=="string"then local e=oop.Classes[c]if e then return e end;error("Resolving class from inexistent class string '"..tostring(c).."'")end;if d=="table"then return c end;error("Resolving class from invalid object '"..tostring(c).."'")end;local f={}local g={'__add','__call','__concat','__div','__ipairs','__le','__len','__lt','__mod','__mul','__pairs','__pow','__sub','__tostring','__unm'}function oop.createClass(name,a)local b={}local h;if a~=f then h=oop.resolveClass(a)end;b.name=name;b.super=h;b.members=setmetatable({},{__index=b.super})b.members.class=b;b.members.super=b.super;local i={}do i.__index=b.members;for j,name in pairs(g)do i[name]=function(...)local k=b.members[name]if k then return k(...)end end end end;local class_meta={}do class_meta.__index=b.members;class_meta.__newindex=b.members;class_meta.__tostring=function(self)return"class "..self.name end;function class_meta:__call(...)local l={}setmetatable(l,i)local m=l.initialize;if m then m(l,...)end;return l end end;setmetatable(b,class_meta)return b end;oop.Object=oop.createClass("Object",f)function oop.Object:hashCode()local n=getmetatable(self)local o=n.__tostring;n.__tostring=nil;local p=tostring(self):match("table: 0x(.*)")n.__tostring=o;return p end;function oop.Object:__tostring()return string.format("%s@%s",self.class.name,self:hashCode())end

end
-- Module mediabase
medialib.modulePlaceholder("mediabase")
do
local a=medialib.load("oop")local Media=a.class("Media")function Media:on(b,c)self._events=self._events or{}self._events[b]=self._events[b]or{}self._events[b][c]=true end;function Media:emit(b,...)if not self._events then return end;local d=self._events[b]if not d then return end;for e,f in pairs(d)do e(...)end end;function Media:getServiceBase()error("Media:getServiceBase() not implemented!")end;function Media:getService()return self._service end;function Media:getUrl()return self._unresolvedUrl end;function Media:lookupMetadata()local g=self._metadata;if type(g)=="table"then return g end;if g==true or type(g)=="string"then return nil end;self._metadata=true;self:getService():query(self:getUrl(),function(h,i)if h then self._metadata=h else self._metadata=i end end)return nil end;function Media:isValid()return false end;function Media:IsValid()return self:isValid()end;function Media:setVolume(j)end;function Media:getVolume()end;function Media:setQuality(k)end;function Media:seek(l)end;function Media:getTime()return 0 end;function Media:sync(l,m)if self._lastSync and self._lastSync>CurTime()-5 then return end;local shouldSync=self:shouldSync(l,m)if not shouldSync then return end;self:seek(l+0.1)self._lastSync=CurTime()end;function Media:shouldSync(l,m)if not self:isValid()or not self:isPlaying()then return false end;m=m or 2;local n=self:getTime()local o=math.abs(n-l)return o>m end;function Media:getState()end;function Media:isPlaying()return self:getState()=="playing"end;function Media:play()end;function Media:pause()end;function Media:stop()end;function Media:draw(p,q,r,s)end

end
-- Module servicebase
medialib.modulePlaceholder("servicebase")
do
local a=medialib.load("oop")local Service=a.class("Service")function Service:on(b,c)self._events={}self._events[b]=self._events[b]or{}self._events[b][c]=true end;function Service:emit(b,...)for d,e in pairs(self._events[b]or{})do d(...)end end;function Service:load(f,g)end;function Service:isValidUrl(f)end;function Service:query(f,c)end

end
-- Module timekeeper
medialib.modulePlaceholder("timekeeper")
do
local a=medialib.load("oop")local TimeKeeper=a.class("TimeKeeper")function TimeKeeper:initialize()self:reset()end;function TimeKeeper:reset()self.cachedTime=0;self.running=false;self.runningTimeStart=0 end;function TimeKeeper:getTime()local b=self.cachedTime;if self.running then b=b+RealTime()-self.runningTimeStart end;return b end;function TimeKeeper:isRunning()return self.running end;function TimeKeeper:play()if self.running then return end;self.runningTimeStart=RealTime()self.running=true end;function TimeKeeper:pause()if not self.running then return end;local c=RealTime()-self.runningTimeStart;self.cachedTime=self.cachedTime+c;self.running=false end;function TimeKeeper:seek(b)self.cachedTime=b;if self.running then self.runningTimeStart=RealTime()end end

end
-- Module service_html
medialib.modulePlaceholder("service_html")
do
local a=medialib.load("oop")medialib.load("timekeeper")local b=medialib.load("volume3d")local HTMLService=a.class("HTMLService","Service")function HTMLService:load(c,d)local e=a.class("HTMLMedia")()e._unresolvedUrl=c;e._service=self;self:resolveUrl(c,function(f,g)e:openUrl(f)if d and d.use3D then b.startThink(e,{pos=d.pos3D,ent=d.ent3D,fadeMax=d.fadeMax3D})end;if g and g.start and not d or not d.dontSeek then e:seek(g.start)end end)return e end;function HTMLService:resolveUrl(c,h)h(c,self:parseUrl(c))end;function HTMLService:hasReliablePlaybackEvents(e)return false end;local AwesomiumPool={instances={}}concommand.Add("medialib_awepoolinfo",function()print("AwesomiumPool> Free instance count: "..#AwesomiumPool.instances)end)timer.Create("MediaLib.AwesomiumPoolCleaner",30,0,function()if#AwesomiumPool.instances<3 then return end;local i=table.remove(AwesomiumPool.instances,1)if IsValid(i)then i:Remove()end end)function AwesomiumPool.get()local i=table.remove(AwesomiumPool.instances,1)if not IsValid(i)then local j=vgui.Create("DHTML")return j end;return i end;function AwesomiumPool.free(i)if not IsValid(i)then return end;i:SetHTML("")table.insert(AwesomiumPool.instances,i)end;local HTMLMedia=a.class("HTMLMedia","Media")local k,l=1280,720;function HTMLMedia:initialize()self.timeKeeper=a.class("TimeKeeper")()self.panel=AwesomiumPool.get()local j=self.panel;j:SetPos(0,0)j:SetSize(k,l)local m="MediaLib.HTMLMedia.FakeThink-"..self:hashCode()hook.Add("Think",m,function()if not IsValid(self.panel)then hook.Remove("Think",m)return end;self.panel:Think()end)local n=j._OldCM or j.ConsoleMessage;j._OldCM=n;j.ConsoleMessage=function(o,p)if string.find(p,"XMLHttpRequest")then return end;if string.find(p,"Unsafe JavaScript attempt to access")then return end;return n(o,p)end;j:SetPaintedManually(true)j:SetVisible(false)j:AddFunction("medialiblua","Event",function(q,r)self:handleHTMLEvent(q,util.JSONToTable(r))end)end;function HTMLMedia:getBaseService()return"html"end;function HTMLMedia:openUrl(c)self.panel:OpenURL(c)self.URLChanged=CurTime()end;function HTMLMedia:runJS(s,...)local t=string.format(s,...)self.panel:QueueJavascript(t)end;function HTMLMedia:handleHTMLEvent(q,u)if q=="stateChange"then local state=u.state;local v;if u.time then self.timeKeeper:seek(u.time)end;if state=="playing"then v="playing"self.timeKeeper:play()elseif state=="ended"or state=="paused"or state=="buffering"then v=state;self.timeKeeper:pause()end;if v then self.state=v;self:emit(v)end end end;function HTMLMedia:getState()return self.state end;function HTMLMedia:updateTexture()if self.lastUpdatedFrame~=FrameNumber()then self.panel:UpdateHTMLTexture()self.lastUpdatedFrame=FrameNumber()end end;function HTMLMedia:draw(w,x,y,z)self:updateTexture()local A=self.panel:GetHTMLMaterial()surface.SetMaterial(A)surface.SetDrawColor(255,255,255)local B,C=k/A:Width(),l/A:Height()surface.DrawTexturedRectUV(w or 0,x or 0,y or k,z or l,0,0,B,C)end;function HTMLMedia:getTime()return self.timeKeeper:getTime()end;function HTMLMedia:setQuality(D)if self.lastSetQuality and self.lastSetQuality==D then return end;self.lastSetQuality=D;self:runJS("medialibDelegate.run('setQuality', {quality: %q})",D)end;function HTMLMedia:applyVolume()local E=self.internalVolume or 1;local F=self.volume or 1;local G=E*F;if self.lastSetVolume and self.lastSetVolume==G then return end;self.lastSetVolume=G;self:runJS("medialibDelegate.run('setVolume', {vol: %f})",G)end;function HTMLMedia:setVolume(G)self.volume=G;self:applyVolume()end;function HTMLMedia:seek(H)self:runJS("medialibDelegate.run('seek', {time: %d})",H)end;function HTMLMedia:hasReliablePlaybackEvents()local I=self:getService()return I and I:hasReliablePlaybackEvents(self)end;function HTMLMedia:play()if not self:hasReliablePlaybackEvents()then self.timeKeeper:play()end;self:runJS("medialibDelegate.run('play')")end;function HTMLMedia:pause()if not self:hasReliablePlaybackEvents()then self.timeKeeper:pause()end;self:runJS("medialibDelegate.run('pause')")end;function HTMLMedia:stop()AwesomiumPool.free(self.panel)self.panel=nil;self.timeKeeper:pause()self:emit("destroyed")end;function HTMLMedia:isValid()return IsValid(self.panel)end

end
-- Module service_bass
medialib.modulePlaceholder("service_bass")
do
local a=medialib.load("oop")local b=medialib.load("volume3d")local BASSService=a.class("BASSService","Service")function BASSService:load(c,d)local e=a.class("BASSMedia")()e._unresolvedUrl=c;e._service=self;self:resolveUrl(c,function(f,g)if d and d.use3D then e.is3D=true;e:runCommand(function(chan)b.startThink(e,{pos=d.pos3D,ent=d.ent3D,fadeMax=d.fadeMax3D})end)end;e:openUrl(f)if g and g.start and not d or not d.dontSeek then e:seek(g.start)end end)return e end;function BASSService:resolveUrl(c,h)h(c,self:parseUrl(c))end;local BASSMedia=a.class("BASSMedia","Media")function BASSMedia:initialize()self.commandQueue={}end;function BASSMedia:getBaseService()return"bass"end;function BASSMedia:updateFFT()local i=FrameNumber()if self._lastFFTUpdate and self._lastFFTUpdate==i then return end;self._lastFFTUpdate=i;local chan=self.chan;if not IsValid(chan)then return end;self.fftValues=self.fftValues or{}chan:FFT(self.fftValues,FFT_512)end;function BASSMedia:getFFT()return self.fftValues end;function BASSMedia:draw(j,k,l,m)surface.SetDrawColor(0,0,0)surface.DrawRect(j,k,l,m)self:updateFFT()local fftValues=self:getFFT()if not fftValues then return end;local n=#fftValues;local o=n==0 and 1 or l/n;local p=l/n;for q=1,n do surface.SetDrawColor(HSVToColor(q,0.9,0.5))local r=fftValues[q]*m;surface.DrawRect(j+q*p,k+m-r,p,r)end end;function BASSMedia:openUrl(c)local s="noplay noblock"if self.is3D then s=s.." 3d"end;sound.PlayURL(c,s,function(chan,t,u)self:bassCallback(chan,t,u)end)end;function BASSMedia:openFile(v)local s="noplay noblock"if self.is3D then s=s.." 3d"end;sound.PlayFile(v,s,function(chan,t,u)self:bassCallback(chan,t,u)end)end;function BASSMedia:bassCallback(chan,t,u)if not IsValid(chan)then ErrorNoHalt("[MediaLib] BassMedia play failed: ",u)return end;if self._stopped then chan:Stop()return end;self.chan=chan;for w,x in pairs(self.commandQueue)do x(chan)end;self.commandQueue={}end;function BASSMedia:runCommand(y)if IsValid(self.chan)then y(self.chan)else self.commandQueue[#self.commandQueue+1]=y end end;function BASSMedia:setVolume(z)self:runCommand(function(chan)chan:SetVolume(z)end)end;function BASSMedia:seek(A)self:runCommand(function(chan)chan:SetTime(A)end)end;function BASSMedia:getTime()if self:isValid()then return self.chan:GetTime()end;return 0 end;function BASSMedia:getState()if not self:isValid()then return"error"end;local B=self.chan:GetState()if B==GMOD_CHANNEL_PLAYING then return"playing"end;if B==GMOD_CHANNEL_PAUSED then return"paused"end;if B==GMOD_CHANNEL_STALLED then return"buffering"end;if B==GMOD_CHANNEL_STOPPED then return"paused"end;return end;function BASSMedia:play()self:runCommand(function(chan)chan:Play()self:emit("playing")end)end;function BASSMedia:pause()self:runCommand(function(chan)chan:Pause()self:emit("paused")end)end;function BASSMedia:stop()self._stopped=true;self:runCommand(function(chan)chan:Stop()self:emit("destroyed")end)end;function BASSMedia:isValid()return IsValid(self.chan)end

end
-- Module media
medialib.modulePlaceholder("media")
do
local media=medialib.module("media")media.Services={}function media.registerService(a,b)media.Services[a]=b()end;media.RegisterService=media.registerService;function media.service(a)return media.Services[a]end;media.Service=media.service;function media.guessService(c)for d,service in pairs(media.Services)do if service:isValidUrl(c)then return service end end end;media.GuessService=media.guessService

end
medialib.FolderItems["services/dailymotion.lua"] = "local a=medialib.load(\"oop\")local DailyMotionService=a.class(\"DailyMotionService\",\"HTMLService\")local b={\"https?://www.dailymotion.com/video/([A-Za-z0-9_%-]+)\",\"https?://dailymotion.com/video/([A-Za-z0-9_%-]+)\"}function DailyMotionService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function DailyMotionService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/dailymotion.html?id=%s\"function DailyMotionService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)h(j,{start=i.start})end;function DailyMotionService:query(c,h)local i=self:parseUrl(c)local k=string.format(\"https://api.dailymotion.com/video/%s?fields=duration,title\",i.id)http.Fetch(k,function(l,m)if m==0 then h(\"http body size = 0\")return end;local n={}n.id=i.id;local o=util.JSONToTable(l)if o then n.title=o.title;n.duration=o.duration else n.title=\"ERROR\"end;h(nil,n)end,function(p)h(\"HTTP: \"..p)end)end;medialib.load(\"media\").registerService(\"dailymotion\",DailyMotionService)\
"
medialib.FolderItems["services/soundcloud.lua"] = "local a=medialib.load(\"oop\")local SoundcloudService=a.class(\"SoundcloudService\",\"BASSService\")local b={\"^https?://www.soundcloud.com/([A-Za-z0-9_%-]+/[A-Za-z0-9_%-]+)/?$\",\"^https?://soundcloud.com/([A-Za-z0-9_%-]+/[A-Za-z0-9_%-]+)/?$\"}function SoundcloudService:parseUrl(c)for d,e in pairs(b)do local id=string.match(c,e)if id then return{id=id}end end end;function SoundcloudService:isValidUrl(c)return self:parseUrl(c)~=nil end;function SoundcloudService:resolveUrl(c,f)local g=self:parseUrl(c)http.Fetch(string.format(\"https://api.soundcloud.com/resolve.json?url=http://soundcloud.com/%s&client_id=YOUR_CLIENT_ID\",g.id),function(h)local i=util.JSONToTable(h).id;f(string.format(\"https://api.soundcloud.com/tracks/%s/stream?client_id=YOUR_CLIENT_ID\",i),{})end)end;function SoundcloudService:query(c,f)local g=self:parseUrl(c)local j=string.format(\"http://api.soundcloud.com/resolve.json?url=http://soundcloud.com/%s&client_id=YOUR_CLIENT_ID\",g.id)http.Fetch(j,function(k,l)if l==0 then f(\"http body size = 0\")return end;local m=util.JSONToTable(k)if m.errors then local n=m.errors[1].error_message or\"error\"local o=n;if string.StartWith(n,\"404\")then o=\"Invalid id\"end;f(o)return end;f(nil,{title=m.title,duration=tonumber(m.duration)/1000})end,function(p)f(\"HTTP: \"..p)end)end;medialib.load(\"media\").registerService(\"soundcloud\",SoundcloudService)\
"
medialib.FolderItems["services/twitch.lua"] = "local a=medialib.load(\"oop\")local TwitchService=a.class(\"TwitchService\",\"HTMLService\")local b={\"https?://www.twitch.tv/([A-Za-z0-9_%-]+)\",\"https?://twitch.tv/([A-Za-z0-9_%-]+)\"}function TwitchService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function TwitchService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/twitch.html?channel=%s\"function TwitchService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)h(j,{start=i.start})end;function TwitchService:query(c,h)local i=self:parseUrl(c)local k=string.format(\"https://api.twitch.tv/kraken/channels/%s\",i.id)http.Fetch(k,function(l,m)if m==0 then h(\"http body size = 0\")return end;local n={}n.id=i.id;local o=util.JSONToTable(l)if o then if o.error then h(o.message)return else n.title=o.display_name..\": \"..o.status end else n.title=\"ERROR\"end;h(nil,n)end,function(p)h(\"HTTP: \"..p)end)end;medialib.load(\"media\").registerService(\"twitch\",TwitchService)\
"
medialib.FolderItems["services/ustream.lua"] = "local a=medialib.load(\"oop\")local UstreamService=a.class(\"UstreamService\",\"HTMLService\")local b={\"https?://www.ustream.tv/channel/([A-Za-z0-9_%-]+)\",\"https?://ustream.tv/channel/([A-Za-z0-9_%-]+)\"}function UstreamService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function UstreamService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/ustream.html?id=%s\"function UstreamService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)self:query(c,function(k,l)h(string.format(g,l.embed_id),{start=i.start})end)end;function UstreamService:query(c,h)local i=self:parseUrl(c)local m=string.format(\"http://api.ustream.tv/json/channel/%s/getInfo\",i.id)http.Fetch(m,function(n,o)if o==0 then h(\"http body size = 0\")return end;local l={}l.id=i.id;local p=util.JSONToTable(n)if p then if p.error then h(p.msg)return end;l.embed_id=p.results.id;l.title=p.results.title else l.title=\"ERROR\"end;h(nil,l)end,function(k)h(\"HTTP: \"..k)end)end;medialib.load(\"media\").registerService(\"ustream\",UstreamService)\
"
medialib.FolderItems["services/vimeo.lua"] = "local a=medialib.load(\"oop\")local VimeoService=a.class(\"VimeoService\",\"HTMLService\")local b={\"https?://www.vimeo.com/([0-9]+)\",\"https?://vimeo.com/([0-9]+)\",\"https?://www.vimeo.com/channels/staffpicks/([0-9]+)\",\"https?://vimeo.com/channels/staffpicks/([0-9]+)\"}function VimeoService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function VimeoService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/vimeo.html?id=%s\"function VimeoService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)h(j,{start=i.start})end;function VimeoService:query(c,h)local i=self:parseUrl(c)local k=string.format(\"http://vimeo.com/api/v2/video/%s.json\",i.id)http.Fetch(k,function(l,m,n,o)if m==0 then h(\"http body size = 0\")return end;if o==404 then h(\"Invalid id\")return end;local p={}p.id=i.id;local q=util.JSONToTable(l)if q then p.title=q[1].title;p.duration=q[1].duration else p.title=\"ERROR\"end;h(nil,p)end,function(r)h(\"HTTP: \"..r)end)end;function VimeoService:hasReliablePlaybackEvents(s)return true end;medialib.load(\"media\").registerService(\"vimeo\",VimeoService)\
"
medialib.FolderItems["services/webaudio.lua"] = "local a=medialib.load(\"oop\")local WebAudioService=a.class(\"WebAudioService\",\"BASSService\")local b={\"^https?://(.*)%.mp3\",\"^https?://(.*)%.ogg\"}function WebAudioService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function WebAudioService:isValidUrl(c)return self:parseUrl(c)~=nil end;function WebAudioService:resolveUrl(c,g)g(c,{})end;local h=medialib.load(\"id3parser\")local i=medialib.load(\"mp3duration\")function WebAudioService:query(c,g)if string.EndsWith(c,\".mp3\")and h or i then http.Fetch(c,function(j)local title,k;if h then local l=h.readtags_data(j)if l and l.title then title=l.title;if l.artist then title=l.artist..\" - \"..title end;if l.length then local m=tonumber(l.length)if m then k=m/1000 end end end end;if i then k=i.estimate_data(j)or k end;g(nil,{title=title or c:match(\"([^/]+)$\"),k=k})end)return end;g(nil,{title=c:match(\"([^/]+)$\")})end;medialib.load(\"media\").registerService(\"webaudio\",WebAudioService)\
"
medialib.FolderItems["services/webm.lua"] = "local a=medialib.load(\"oop\")local WebmService=a.class(\"WebmService\",\"HTMLService\")local b={\"^https?://(.*)%.webm\"}function WebmService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function WebmService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/webm.html?id=%s\"function WebmService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)h(j,{start=i.start})end;function WebmService:query(c,h)h(nil,{title=c:match(\"([^/]+)$\")})end;medialib.load(\"media\").registerService(\"webm\",WebmService)\
"
medialib.FolderItems["services/webradio.lua"] = "local a=medialib.load(\"oop\")local WebRadioService=a.class(\"WebRadioService\",\"BASSService\")local b={\"^https?://(.*)%.pls\",\"^https?://(.*)%.m3u\"}function WebRadioService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function WebRadioService:isValidUrl(c)return self:parseUrl(c)~=nil end;function WebRadioService:resolveUrl(c,g)g(c,{})end;local h=medialib.load(\"shoutcastmeta\")function WebRadioService:query(c,g)local function i()g(nil,{title=c:match(\"([^/]+)$\")})end;if h then h.fetch(c,function(j,k)if j then i()return end;g(nil,k)end)return end;i()end;medialib.load(\"media\").registerService(\"webradio\",WebRadioService)\
"
medialib.FolderItems["services/youtube.lua"] = "local a=medialib.load(\"oop\")local YoutubeService=a.class(\"YoutubeService\",\"HTMLService\")local b={\"^https?://[A-Za-z0-9%.%-]*%.?youtu%.be/([A-Za-z0-9_%-]+)\",\"^https?://[A-Za-z0-9%.%-]*%.?youtube%.com/watch%?.*v=([A-Za-z0-9_%-]+)\",\"^https?://[A-Za-z0-9%.%-]*%.?youtube%.com/v/([A-Za-z0-9_%-]+)\"}local c={}for d,e in pairs(b)do local function f(g)table.insert(c,e..g..\"t=(%d+)m(%d+)s\")table.insert(c,e..g..\"t=(%d+)s?\")end;f(\"#\")f(\"&\")f(\"?\")table.insert(c,e)end;function YoutubeService:parseUrl(h)for i,j in pairs(c)do local k,l,m=string.match(h,j)if k then local n=0;if l and m then n=tonumber(l)*60+tonumber(m)else n=tonumber(l)end;return{k=k,start=n}end end end;function YoutubeService:isValidUrl(h)return self:parseUrl(h)~=nil end;local o=\"http://wyozi.github.io/gmod-medialib/youtube.html?id=%s\"function YoutubeService:resolveUrl(h,p)local q=self:parseUrl(h)local r=string.format(o,q.id)p(r,{start=q.start})end;local function s(t)local u=t:match(\"(%d+)H\")or 0;local v=t:match(\"(%d+)M\")or 0;local w=t:match(\"(%d+)S\")or 0;return u*60*60+v*60+w end;local x=\"AIzaSyBmQHvMSiOTrmBKJ0FFJ2LmNtc4YHyUJaQ\"function YoutubeService:query(h,p)local q=self:parseUrl(h)local y=string.format(\"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails&id=%s&key=%s\",q.id,x)http.Fetch(y,function(z,A)if A==0 then p(\"http body size = 0\")return end;local B={}B.id=q.id;local C=util.JSONToTable(z)if C and C.items then local D=C.items[1]if not D then p(\"No video id found\")return end;B.title=D.snippet.title;B.duration=tonumber(s(D.contentDetails.duration))else p(z)return end;p(nil,B)end,function(E)p(\"HTTP: \"..E)end)end;function YoutubeService:hasReliablePlaybackEvents(F)return true end;medialib.load(\"media\").registerService(\"youtube\",YoutubeService)\
"
medialib.FolderItems["services/webm.lua"] = "local a=medialib.load(\"oop\")local WebmService=a.class(\"WebmService\",\"HTMLService\")local b={\"^https?://(.*)%.webm\"}function WebmService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function WebmService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/webm.html?id=%s\"function WebmService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)h(j,{start=i.start})end;function WebmService:query(c,h)h(nil,{title=c:match(\"([^/]+)$\")})end;medialib.load(\"media\").registerService(\"webm\",WebmService)\
"
medialib.FolderItems["services/webaudio.lua"] = "local a=medialib.load(\"oop\")local WebAudioService=a.class(\"WebAudioService\",\"BASSService\")local b={\"^https?://(.*)%.mp3\",\"^https?://(.*)%.ogg\"}function WebAudioService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function WebAudioService:isValidUrl(c)return self:parseUrl(c)~=nil end;function WebAudioService:resolveUrl(c,g)g(c,{})end;local h=medialib.load(\"id3parser\")local i=medialib.load(\"mp3duration\")function WebAudioService:query(c,g)if string.EndsWith(c,\".mp3\")and h or i then http.Fetch(c,function(j)local title,k;if h then local l=h.readtags_data(j)if l and l.title then title=l.title;if l.artist then title=l.artist..\" - \"..title end;if l.length then local m=tonumber(l.length)if m then k=m/1000 end end end end;if i then k=i.estimate_data(j)or k end;g(nil,{title=title or c:match(\"([^/]+)$\"),k=k})end)return end;g(nil,{title=c:match(\"([^/]+)$\")})end;medialib.load(\"media\").registerService(\"webaudio\",WebAudioService)\
"
medialib.FolderItems["services/youtube.lua"] = "local a=medialib.load(\"oop\")local YoutubeService=a.class(\"YoutubeService\",\"HTMLService\")local b={\"^https?://[A-Za-z0-9%.%-]*%.?youtu%.be/([A-Za-z0-9_%-]+)\",\"^https?://[A-Za-z0-9%.%-]*%.?youtube%.com/watch%?.*v=([A-Za-z0-9_%-]+)\",\"^https?://[A-Za-z0-9%.%-]*%.?youtube%.com/v/([A-Za-z0-9_%-]+)\"}local c={}for d,e in pairs(b)do local function f(g)table.insert(c,e..g..\"t=(%d+)m(%d+)s\")table.insert(c,e..g..\"t=(%d+)s?\")end;f(\"#\")f(\"&\")f(\"?\")table.insert(c,e)end;function YoutubeService:parseUrl(h)for i,j in pairs(c)do local k,l,m=string.match(h,j)if k then local n=0;if l and m then n=tonumber(l)*60+tonumber(m)else n=tonumber(l)end;return{k=k,start=n}end end end;function YoutubeService:isValidUrl(h)return self:parseUrl(h)~=nil end;local o=\"http://wyozi.github.io/gmod-medialib/youtube.html?id=%s\"function YoutubeService:resolveUrl(h,p)local q=self:parseUrl(h)local r=string.format(o,q.id)p(r,{start=q.start})end;local function s(t)local u=t:match(\"(%d+)H\")or 0;local v=t:match(\"(%d+)M\")or 0;local w=t:match(\"(%d+)S\")or 0;return u*60*60+v*60+w end;local x=\"AIzaSyBmQHvMSiOTrmBKJ0FFJ2LmNtc4YHyUJaQ\"function YoutubeService:query(h,p)local q=self:parseUrl(h)local y=string.format(\"https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails&id=%s&key=%s\",q.id,x)http.Fetch(y,function(z,A)if A==0 then p(\"http body size = 0\")return end;local B={}B.id=q.id;local C=util.JSONToTable(z)if C and C.items then local D=C.items[1]if not D then p(\"No video id found\")return end;B.title=D.snippet.title;B.duration=tonumber(s(D.contentDetails.duration))else p(z)return end;p(nil,B)end,function(E)p(\"HTTP: \"..E)end)end;function YoutubeService:hasReliablePlaybackEvents(F)return true end;medialib.load(\"media\").registerService(\"youtube\",YoutubeService)\
"
medialib.FolderItems["services/webradio.lua"] = "local a=medialib.load(\"oop\")local WebRadioService=a.class(\"WebRadioService\",\"BASSService\")local b={\"^https?://(.*)%.pls\",\"^https?://(.*)%.m3u\"}function WebRadioService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function WebRadioService:isValidUrl(c)return self:parseUrl(c)~=nil end;function WebRadioService:resolveUrl(c,g)g(c,{})end;local h=medialib.load(\"shoutcastmeta\")function WebRadioService:query(c,g)local function i()g(nil,{title=c:match(\"([^/]+)$\")})end;if h then h.fetch(c,function(j,k)if j then i()return end;g(nil,k)end)return end;i()end;medialib.load(\"media\").registerService(\"webradio\",WebRadioService)\
"
medialib.FolderItems["services/twitch.lua"] = "local a=medialib.load(\"oop\")local TwitchService=a.class(\"TwitchService\",\"HTMLService\")local b={\"https?://www.twitch.tv/([A-Za-z0-9_%-]+)\",\"https?://twitch.tv/([A-Za-z0-9_%-]+)\"}function TwitchService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function TwitchService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/twitch.html?channel=%s\"function TwitchService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)h(j,{start=i.start})end;function TwitchService:query(c,h)local i=self:parseUrl(c)local k=string.format(\"https://api.twitch.tv/kraken/channels/%s\",i.id)http.Fetch(k,function(l,m)if m==0 then h(\"http body size = 0\")return end;local n={}n.id=i.id;local o=util.JSONToTable(l)if o then if o.error then h(o.message)return else n.title=o.display_name..\": \"..o.status end else n.title=\"ERROR\"end;h(nil,n)end,function(p)h(\"HTTP: \"..p)end)end;medialib.load(\"media\").registerService(\"twitch\",TwitchService)\
"
medialib.FolderItems["services/vimeo.lua"] = "local a=medialib.load(\"oop\")local VimeoService=a.class(\"VimeoService\",\"HTMLService\")local b={\"https?://www.vimeo.com/([0-9]+)\",\"https?://vimeo.com/([0-9]+)\",\"https?://www.vimeo.com/channels/staffpicks/([0-9]+)\",\"https?://vimeo.com/channels/staffpicks/([0-9]+)\"}function VimeoService:parseUrl(c)for d,e in pairs(b)do local f=string.match(c,e)if f then return{f=f}end end end;function VimeoService:isValidUrl(c)return self:parseUrl(c)~=nil end;local g=\"http://wyozi.github.io/gmod-medialib/vimeo.html?id=%s\"function VimeoService:resolveUrl(c,h)local i=self:parseUrl(c)local j=string.format(g,i.id)h(j,{start=i.start})end;function VimeoService:query(c,h)local i=self:parseUrl(c)local k=string.format(\"http://vimeo.com/api/v2/video/%s.json\",i.id)http.Fetch(k,function(l,m,n,o)if m==0 then h(\"http body size = 0\")return end;if o==404 then h(\"Invalid id\")return end;local p={}p.id=i.id;local q=util.JSONToTable(l)if q then p.title=q[1].title;p.duration=q[1].duration else p.title=\"ERROR\"end;h(nil,p)end,function(r)h(\"HTTP: \"..r)end)end;function VimeoService:hasReliablePlaybackEvents(s)return true end;medialib.load(\"media\").registerService(\"vimeo\",VimeoService)\
"
medialib.FolderItems["services/soundcloud.lua"] = "local a=medialib.load(\"oop\")local SoundcloudService=a.class(\"SoundcloudService\",\"BASSService\")local b={\"^https?://www.soundcloud.com/([A-Za-z0-9_%-]+/[A-Za-z0-9_%-]+)/?$\",\"^https?://soundcloud.com/([A-Za-z0-9_%-]+/[A-Za-z0-9_%-]+)/?$\"}function SoundcloudService:parseUrl(c)for d,e in pairs(b)do local id=string.match(c,e)if id then return{id=id}end end end;function SoundcloudService:isValidUrl(c)return self:parseUrl(c)~=nil end;function SoundcloudService:resolveUrl(c,f)local g=self:parseUrl(c)http.Fetch(string.format(\"https://api.soundcloud.com/resolve.json?url=http://soundcloud.com/%s&client_id=YOUR_CLIENT_ID\",g.id),function(h)local i=util.JSONToTable(h).id;f(string.format(\"https://api.soundcloud.com/tracks/%s/stream?client_id=YOUR_CLIENT_ID\",i),{})end)end;function SoundcloudService:query(c,f)local g=self:parseUrl(c)local j=string.format(\"http://api.soundcloud.com/resolve.json?url=http://soundcloud.com/%s&client_id=YOUR_CLIENT_ID\",g.id)http.Fetch(j,function(k,l)if l==0 then f(\"http body size = 0\")return end;local m=util.JSONToTable(k)if m.errors then local n=m.errors[1].error_message or\"error\"local o=n;if string.StartWith(n,\"404\")then o=\"Invalid id\"end;f(o)return end;f(nil,{title=m.title,duration=tonumber(m.duration)/1000})end,function(p)f(\"HTTP: \"..p)end)end;medialib.load(\"media\").registerService(\"soundcloud\",SoundcloudService)\
"
-- Module serviceloader
medialib.modulePlaceholder("serviceloader")
do
medialib.load("servicebase")medialib.load("service_html")medialib.load("service_bass")for a,b in medialib.folderIterator("services")do if medialib.DEBUG then print("[MediaLib] Registering service "..b.name)end;if SERVER then b:addcs()end;b:load()end

end
-- Module __loader
medialib.modulePlaceholder("__loader")
do
medialib.load("mediabase")medialib.load("serviceloader")medialib.load("media")

end